{"meta":{"title":"CicadaOnTheTree","subtitle":"哈喽呀","description":"我要握住一个最美的梦给未来的自己","author":"Vanessa Yao","url":"https://vanessayaoyao.github.io","root":"/"},"pages":[{"title":"tags","date":"2021-12-03T10:26:53.000Z","updated":"2021-12-03T10:27:25.448Z","comments":true,"path":"tags/index.html","permalink":"https://vanessayaoyao.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"git 入门","slug":"learn-git","date":"2022-01-07T08:35:36.000Z","updated":"2022-01-07T10:23:23.796Z","comments":true,"path":"2022/01/07/learn-git/","link":"","permalink":"https://vanessayaoyao.github.io/2022/01/07/learn-git/","excerpt":"","text":"虽然之前在GitHub传过几个项目，但那都是用Pycharm的插件传的，我对git可以说是只见其声不见其人，根本不会用。 Git is officially defined as a distributed version control system (VCS). Learn GitInitializing a repository12$ git initInitialized empty Git repository in D:/helloworld/OtherProjects/Snake/.git/ 我这里有一个用原生JavaScript写的贪吃蛇小游戏（比着人家的视频写的） Checking the status1234567891011$ git statusOn branch masterNo commits yetUntracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) game.js index.htmlnothing added to commit but untracked files present (use &quot;git add&quot; to track) Staging files1$ git add game.js index.html 或者 1$ git add . 再次查看状态 123456789$ git statusOn branch masterNo commits yetChanges to be committed: (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage) new file: game.js new file: index.html Making commits12345$ git commit -m &quot;this is my first commit&quot;[master (root-commit) 1637404] this is my first commit 2 files changed, 196 insertions(+) create mode 100644 game.js create mode 100644 index.html 123$ git statusOn branch masternothing to commit, working tree clean Commit history1234567$ git logcommit 1637404a766dad9bb1bc5c7995261131c688f747 (HEAD -&gt; master)Author: VanessaYaoyao &lt;929228571@qq.com&gt;Date: Fri Jan 7 17:00:11 2022 +0800 this is my first commit go back to a previous state of your project code that you committed, you can use the following command: 1$ git checkout &lt;commit-hash&gt; go back to the latest commit (the newest version of our project code), you can type this command: 1$ git checkout master Creating a new branch1$ git branch &lt;new-branch-name&gt; Changing branches1$ git checkout &lt;branch-name&gt; Learn GitHubCreating a new GitHub repository点击左上角头像旁边的加号 Pushing our code to the GitHub repository1234567891011$ git remote add origin https://github.com/VanessaYaoyao/JavaScript-Snake.git$ git push -u origin masterEnumerating objects: 4, done.Counting objects: 100% (4/4), done.Delta compression using up to 8 threadsCompressing objects: 100% (4/4), done.Writing objects: 100% (4/4), 2.15 KiB | 735.00 KiB/s, done.Total 4 (delta 0), reused 0 (delta 0), pack-reused 0To https://github.com/VanessaYaoyao/JavaScript-Snake.git * [new branch] master -&gt; masterBranch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;origin&#x27;. Making changes to the GitHub repository1$ git push origin master Cloning an existing GitHub repository1$ git clone &lt;github-repo-link&gt; 现在估计就够我用的了。其他的用法以后用到的时候在学。","categories":[],"tags":[{"name":"code","slug":"code","permalink":"https://vanessayaoyao.github.io/tags/code/"}]},{"title":"Java Part 2 - OOP","slug":"learning-java-2","date":"2021-12-28T04:54:53.000Z","updated":"2022-01-06T07:07:58.892Z","comments":true,"path":"2021/12/28/learning-java-2/","link":"","permalink":"https://vanessayaoyao.github.io/2021/12/28/learning-java-2/","excerpt":"","text":"[toc] Object-oriented ProgrammingUltimate Java Part 2 - Object-oriented Programming | Code with Mosh Getting StartedProgramming Paradigms ways or styles of writing code 编程范式 Precedural Functional Object-oriented Event-driven Logic Aspect-oriented Problem Solving Process of defining a problem, identifying and comparing different solutions, and picking the one that best solves that problem with respect to the context and constraints. Depends on the problem, context and budget. Benefits of OOP Reduced Complexity Easier Maintenance Code Reuse Faster Development ClassesClass and ObjectClass: A blueprint for creating objects Object: An instance of a class. UML: unified modeling language 123456789101112package com.company;public class TextBox &#123; //设置初始值，不设置则为null, very dangerous public String text = &quot;&quot;; //Field public void setText(String text)&#123; this.text = text; &#125; public void clear()&#123; text = &quot;&quot;; &#125;&#125; 1234567public class Main &#123; public static void main(String[] args) &#123; TextBox textBox1 = new TextBox(); //jdk10以上可用var, like js textBox1.setText(&quot;Box 1&quot;); System.out.println(textBox1.text);//Box 1 &#125;&#125; Memory Allocation内存分配 heap:堆 stack:栈 1234TextBox textBox1 = new TextBox();TextBOx textBox2 = textBox1;textBox2.setText(&quot;Hello World&quot;);System.out.println(textBox1.text);//Hello World What is the difference between stack and heap memory? How are they managed? Stack is used for storing primitive types (numbers, boolean and character) and variables that store references to objects in the heap. Variables stored in the stack are immediately cleared when they go out of scope (eg when a method finishes execution). Objects stored in the heap get removed later on when they’re no longer references. This is done by Java’s garbage collector. Garbage collection: automatically remove unused objects on the heap. Encapsulation Bundle the data and methods that operate on the data in a single unit.封装 Procedural Programming过程化编程 spaghetti code What are the problems of procedural code? How does object-oriented programming help solve these problems? Big classes with several unrelated methods focusing on different concerns and responsibilities. These methods often have several parameters. You often see the same group of parameters repeated across these methods. All you see is procedures calling each other passing arguments around. By applying object-oriented programming techniques, we extract these repetitive parameters and declare them as fields in our classes. Our classes will then encapsulate both the data and the operations on the data (methods). As a result, our methods will have fewer parameters and our code will be cleaner and more reusable. 1234567public class Employee &#123; public int baseSalary; public int hourlyRate; public int calculateWage(int extraHours)&#123; return baseSalary + (hourlyRate*extraHours); &#125;&#125; 12345678910public class Main &#123; public static void main(String[] args) &#123; Employee employee = new Employee(); employee.baseSalary = 50_000; //如果输入一个负数呢? 可以在主函数里写if else,but it&#x27;s not good. employee.hourlyRate = 20; int wage = employee.calculateWage(10); System.out.println(wage); &#125;&#125; Getters and Setters Why should we declare fields as private? How we store data in an object is considered an implementation detail. We may change how we store the data internally. Plus, we don’t want our objects to go into a bad state (hold bad data). That’s why we should declare fields as private and provide getters and or setters only if required. These setters can ensure our objects don’t go into a bad state by validating the values that are passed to them. 1234567891011public class Employee &#123; private int baseSalary; public void setBaseSalary(int baseSalary)&#123; if (baseSalary&lt;=0) throw new IllegalArgumentException(&quot;can&#x27;t be 0 or less.&quot;); this.baseSalary = baseSalary; &#125; public int getBaseSalary()&#123; return baseSalary; &#125;&#125; A trick: ask intellij to do it for us. press Alt+Enter apply Abstraction Reduce complexity by hiding unnecessary details. 抽象 给你一个遥控器，我们只需要知道如何换台，不需要知道按钮之下的电路如何运作。 As a metaphor, think of the remote control of your TV. All the complexity inside the remote control is hidden from you. It’s abstracted away. You just work with a simple interface to control your TV. We want our objects to be like our remote controls. Coupling The level of dependency between classes. 耦合 The more our classes are dependent on each other, the harder it is to change them. Changing one class may result in several cascading and breaking changes. Reducing coupling 123456789101112131415public class Browser &#123; //其他类只调用navigate这个函数 public void navigate(String address)&#123; String ip = findIpAddress(address); String html = sendHttpRequest(ip); System.out.println(html); &#125; //其他函数隐藏，即private private String sendHttpRequest(String ip) &#123; return &quot;&lt;html&gt;&lt;/html&gt;&quot;; &#125; private String findIpAddress(String address) &#123; return &quot;127.0.0.1&quot;; &#125;&#125; How does the abstraction principle help reduce coupling? By hiding the implementation details, we prevent other classes from getting affected when we change these details. For example, if the logic board and transistors inside a remote control change from one model to another, we’re not affected. We still use the same interface to work with our TV. Also, reducing these details and exposing fewer methods makes our classes easier to use. For example, remote controls with fewer buttons are easier to use. Constructors Constructors are called when we instantiate our class. We use them to initialize our objects. Initialization means putting an object into an early or initial state (eg giving it initial values). 12345678910public class Employee &#123; private int baseSalary; private int hourlyRate; //构造器，没有返回类型，名字与类名一致 public Employee(int baseSalary, int hourlyRate)&#123; setBaseSalary(baseSalary); setHourlyRate(hourlyRate); &#125; ...&#125; if we don’t create a constructor, the java compiler will automatically create one for us(the default constructor). Method Overloading Method overloading means declaring a method with the same name but with different signatures. The number, type and order of its parameters will be different. creating different implementations of it with different parameters. trick: ctrl+D to duplicate 123456public int calculateWage(int extraHours)&#123; return baseSalary + (getHourlyRate() *extraHours);&#125;public int calculateWage()&#123; return calculateWage(0) ;&#125; be aware of it, but don’t overuse it. Constructor Overloading1234567public Employee(int baseSalary)&#123; this(baseSalary,0);&#125;public Employee(int baseSalary, int hourlyRate)&#123; setBaseSalary(baseSalary); setHourlyRate(hourlyRate);&#125; Static Members Static methods are accessible via classes, not objects. 1234567891011public class Employee()&#123; public static int numberOfEmployees; public static void printNumberOfEmployees&#123; //在里面调用其他函数，必须先创建实例 ... &#125; ...&#125;Employee.numberOfEmployees;//不用创实例，直接调用类System.out.print();//这就是调用的 static methodInteger.parseInt();//这也是 Refactoring to an Object-oriented Design实例","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://vanessayaoyao.github.io/tags/java/"}]},{"title":"Java Part 1 - Fundamentals","slug":"learning-java","date":"2021-12-25T06:44:55.000Z","updated":"2021-12-28T05:00:32.408Z","comments":true,"path":"2021/12/25/learning-java/","link":"","permalink":"https://vanessayaoyao.github.io/2021/12/25/learning-java/","excerpt":"","text":"Java还是要学的 Fundamentals视频链接：Learning Java with Mosh Part One Anatomy of java program function 1234567891011ReturnType Name()&#123; ...&#125;void sendEmail()&#123; ...&#125;public class Main&#123; public void main()&#123; ... &#125;&#125; class: A container for related functions PascalNamingConvention→Classes camelNamingConvention→Methods How Java Code Gets Executed compilation→javac Main.class excution→java Mian Intellij hides that for us. TypesVariables primitive for storing simple values reference for storing complex objects 1234long viewsCount = 3_123_456_789L;float price = 10.99F;char letter = &#x27;A&#x27;;boolean isEligible = false; 1234567 byte x = 1; byte y = x;//改变x值y值不变Point point1 = new Point(1,1);Point point2 = point1;point1.x = 2;//point2的值也改变 Strings1234String message = &quot;Hello world&quot; + &quot;!!&quot;;message.length();//.出后看方法message.replace(&quot;target&quot;,&quot;replacement&quot;)message.trim()//去除前后空白（就像Python里的strip? In Java, Strings are immutable. return a new string Escape Sequences12345// Hello &quot;world&quot;String message = &quot;Hello \\&quot;world\\&quot;&quot;;// c:\\Windows\\..String message = &quot;c:\\\\windows\\\\..&quot;;//常用的还有\\n 和\\t Arrays1234567891011int[] numbers = new int[5];numbers[0] = 1;numbers[1] = 2;System.out.println(Arrays.toString(numbers));//[1,2,0,0,0]int[] numbers = &#123;2,3,4,1,4&#125;;System.out.println(numbers.length);//5Arrays.sort(numbers);System.out.println(Arrays.toString(numbers));//[1,2,3,4,4] In Java, arrays have a fixed size. Muti-dimensional Arrays123456int[][] numbers = new int[2][3];numbers[0][0]=1;System.out.println(Arrays.deepToString(numbers));//[[1, 0, 0], [0, 0, 0]]int[][] numbers = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;//[[1, 2, 3], [4, 5, 6]] Constants1final float PI = 3.14F; Arithmetic Expressions1234567891011int result = 10/3;//3double result = (double)10/(double)3;//3.333333int x = 1;int y = x++;//x=2;y=1int x = 1;int y = ++x;//x=2,y=2x +=2; Casting1234567891011// Implicit casting// byte &gt; short &gt; int &gt; long &gt; float &gt; doubleshort x = 1;int y = x + 2;double x = 1.1;double y = x + 2;//2.0 // Explicit castingint y = (int)x + 2;String x = &quot;1&quot;;int y = Integer.parseInt(x) + 2; //3//Short.parseShort() Float.parseFloat()... The Math Class12345int result = Math.round(1.1F) //1int result = (int)Math.ceil(1.1F) //2int result = (int)Math.floor(1.1F) //1int result = Math.max(1,2) //2int result = (int)Math.round(Math.random()*100);//0-100随机数 Formatting Numbers123456NumberFormat currency = NumberFormat.getCurrencyInstance();String result = currency.format(1234567.891);//￥1,234,567.89NumberFormat percent = NumberFormat.getPercentInstance();String result = percent.format(0.1);//10% Reading Input123456789Scanner scanner = new Scanner(System.in);System.out.print(&quot;Age: &quot;);byte age = scanner.nextByte();//.nextFloat() .nextDouble()System.out.println(&quot;You are &quot;+age);String name = scanner.next();//Name: Vanessa Yao//You are Vanessa (空格后的词被丢失)String name = scanner.nextLine().trim();//You are Vanessa Yao Control FlowLogical Operators123456Scanner scanner = new Scanner(System.in);byte temperature = scanner.nextByte();boolean isWarm = (temperature &gt; 20) &amp;&amp; (temperature &lt; 30);// and(&amp;&amp;)第一个表达式为false时，java will ignore others.// or(||)第一个表达式为true时, java will ignore others.// not(!) If Statements12345678int temp &#x3D; 32;if(temp&gt;30)&#123; System.out.println(&quot;It&#39;s a hot day&quot;);&#125;else if(temp&gt;20)&#123;&#125;else&#123;&#125; simplifying if statement 12int income = 120_000;boolean hasHighIncome = (income &gt; 100_000); The Ternary Operator12int income = 120_000;String className = income &gt; 100_000 ? &quot;First&quot; : &quot;Economy&quot; Switch Statements1234567891011String role = &quot;admin&quot;;switch(role)&#123; case &quot;admin&quot;: System.out.println(&quot;You are an admin&quot;); break; case &quot;moderator&quot;: System.out.println(&quot;You are a moderator&quot;); break; default: System.out.println(&quot;You are a guest&quot;);&#125; For Loops123for(int i = 0; i&lt;5; i++)&#123; System.out.println(&quot;Hello world&quot;);&#125; While Loopsdon’t know how many times 1234567String input = &quot;&quot;;Scanner = scanner = new Scanner(System.in)while(!input.equals(&quot;quit&quot;))&#123; //不能用==，比较的是地址 System.out.print(&quot;Input: &quot;); input = scanner.next().toLowerCase(); System.out.println(input);&#125; Do…While Loopsat least once Break and Continue1234while(true)&#123; if(input.equals(&quot;quit&quot;)) break;&#125; For-Each Loop12345String[] fruits = &#123;&quot;Apple&quot;,&quot;Mango&quot;,&quot;Orange&quot;&#125;;for(String fruit : fruits)&#123; System.out.println(fruit);&#125;//只能从头到尾，not index 第一部分在油管上免费，讲的确实不错。第二部分和第三部分要收钱了。 哦吼，B站有人搬运，白嫖使我快乐。https://www.bilibili.com/video/BV19J411t7dD Object-oriented ProgrammingUltimate Java Part 2 - Object-oriented Programming | Code with Mosh Classes Refactoring Towards an Object-oriented Design Inheritance Interfaces Advanced TopicsUltimate Java Part 3: Advanced Topics | Code with Mosh Exceptions Generics泛型 Collections Lambda Expressions and Functional Interfaces Streams Concurrency and Multi-threading The Executive Framework","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://vanessayaoyao.github.io/tags/java/"}]},{"title":"Ajax初识","slug":"ajax","date":"2021-12-23T04:33:25.000Z","updated":"2021-12-29T00:15:46.908Z","comments":true,"path":"2021/12/23/ajax/","link":"","permalink":"https://vanessayaoyao.github.io/2021/12/23/ajax/","excerpt":"","text":"是啥AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML） AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 我理解的就是前端用AJAX来请求接口 实例 一个小例子，点击按钮获得3条动物信息。 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;JSON and AJAX&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;header&gt; &lt;h1&gt;JSON and AJAX&lt;/h1&gt; &lt;button id=&#x27;btn&#x27;&gt;Fetch Info for 3 New Animals&lt;/button&gt; &lt;/header&gt; &lt;div id=&#x27;animal-info&#x27;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&#x27;main.js&#x27;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031var pageCounter = 1;var animalContainer = document.getElementById(&quot;animal-info&quot;)var btn = document.getElementById(&quot;btn&quot;);//监听事件，当btn被点击时调用该匿名函数btn.addEventListener(&quot;click&quot;, function()&#123; //新建对象 var ourRequest = new XMLHttpRequest(); //用GET请求URL ourRequest.open(&quot;GET&quot;,&quot;https://learnwebcode.github.io/json-example/animals-&quot;+pageCounter+&quot;.json&quot;) //onload意为全部加载完后 ourRequest.onload = function()&#123; //转为JSON对象 var ourData = JSON.parse(ourRequest.responseText) renderHTML(ourData); &#125;; ourRequest.send() pageCounter++; if (pageCounter&gt;3) &#123; btn.classList.add(&quot;hide-me&quot;);//这里是点击三次后隐藏按钮，但我这好像不太管用 &#125;&#125;)function renderHTML(data)&#123; var htmlString = &#x27;&#x27;; for(var i=0;i&lt;data.length;i++)&#123; //数据展示 htmlString += &quot;&lt;p&gt;&quot;+data[i].name+&quot; is a &quot;+data[i].species +&quot;.&lt;/p&gt;&quot; &#125; animalContainer.insertAdjacentHTML(&quot;beforeend&quot;,htmlString)&#125; 到这里还和我看到别人用的ajax不太一样。我看的用法好像是$ajax(…)什么什么的，这好像是jquary的用法？ 未完待续。 2021/12/29 更新 VanillaJS是史上最轻量跨平台前端框架 ，我们能够使用它构建强大的JS应用。从过去到以后他都是最轻量的框架。因为vanillaJS的广受欢迎，所有的浏览器都已经内置这个框架了！ jQuery也是一个框架。 Vanilla JS 1234567var r = new XMLHttpRequest();r.open(&quot;POST&quot;, &quot;path/to/api&quot;, true);r.onreadystatechange = function () &#123; if (r.readyState != 4 || r.status != 200) return; alert(&quot;Success: &quot; + r.responseText);&#125;;r.send(&quot;banana=yellow&quot;); jQuery 1234567891011&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$.ajax(&#123; type: &#x27;POST&#x27;, url: &quot;path/to/api&quot;, data: &quot;banana=yellow&quot;, success: function (data) &#123; alert(&quot;Success: &quot; + data); &#125;,&#125;);&lt;/script&gt;","categories":[],"tags":[{"name":"code","slug":"code","permalink":"https://vanessayaoyao.github.io/tags/code/"}]},{"title":"一些古早言论","slug":"nonsense","date":"2021-12-18T10:24:19.000Z","updated":"2021-12-19T15:04:46.806Z","comments":true,"path":"2021/12/18/nonsense/","link":"","permalink":"https://vanessayaoyao.github.io/2021/12/18/nonsense/","excerpt":"","text":"下面的这些话是我大一下的时候写的，那时候还是写在一个word文档里，写的又臭又长。现在再看有种看自己古早QQ空间的尴尬感。 My Coding Diary 不知道最开始的日期了 （老师夸我了，虽然不知道是我哈哈哈） 搞了好久终于写出来一道题，开心到飞起，耳边自动播放bgm ：We are the champion..!!! 以后不用看老板脸色，不用到处求人找关系，埋头敲代码就行了，还有赚大钱的可能，走上人生巅峰！！ hahah,想太多了 哈哈哈开心到发出猪叫了哈哈啊，俺就是山核桃 我太喜欢这五个完全正确了，真的是写了好久，改了又改，✌( •̀ ω •́ )✌ 和上面是同一道题，给别人瞎指挥哈哈哈哈哈 Yohu 安好了，一大段一大段的红色也没把我击退，有事问百度多试几遍就好了（虽然我中间也担心，瞎鼓捣把电脑搞坏了怎么办hhhhaha~~） 老师说一个班有四分之一的同学能做出来这道题，然后我就在那四分之一里哈哈哈（哎，也不要太开心，毕竟这是公共课，如果转到计算机去学专业课，我不知道会被大佬虐成什么样哈哈） 2020.6.3今天单元测试，又感觉自己是个垃圾了，得了0分。 开考前磨磨蹭蹭，也没仔细审题，上来就敲键盘，明明是很简单的题，哎 但是看到计算机这么厉害，还是很兴奋，很高兴 老师也讲说他初始语音识别技术的欣喜 到最后二十分钟讲函数的时候我竟然困了，一巴掌把我自己扇死得了 2020.6.16今天是星期二，还没上python课，在群里看到有人传了一张用Python制作的图表， 哇，也太好看了吧，就那种精细的曲线，透漏着数据的严谨（哈哈哈，我在吹什么彩虹屁） 现在，目前为止，我已经十分确定了，下学期就只选计算机培养方案的课， 哎呀呀，我与计算机的一段孽缘即将展开啦，期待期待。 2020.6.17 开始复习了 2020.6.19我好垃圾，复习起来感觉什么都忘了 仰望一下计算机大佬 哎，不知道我转过去会被虐成什么样，好像如果超不过班级平均分，连加课都不给加了，这可不行这可不行，我也要成为大佬！ 2020.6.20 神奇！用记事本打开是一堆代码，好像是和网页有关的，扩展名改了之后就真的可以了，为什么人家懂的辣么多！ 这里确实挺神奇的，再回看才发现这位大佬就是戴老师！ 通识课我相中了一门叫什么什么超越时空的什么什么虚拟现实，这名感觉不会有很多人选，但是是计算机系的开的，我要选！看看能不能学到什么真材实料的东西，那种比较偏文的通识课，可能我一开始还抱有激情，过几节课之后就开始水了（比如上学期的国际关系还是国际政治），希望选的人不要太多，这样我就可以白嫖了哈哈哈哈，然后还可以选门体育（想的挺好哈哈） 大二我还是决定多选公共基础课通识课什么的，专业课一是有先修限制，二来我也怕基础打不好，还是好好学吧。可能到大三我还是不能轻举易动，但是应该慢慢可以选上大四的课了，反正随机应变吧。 2020.6.21在一个选课评价上看到我相中的那门课巨坑？事多分少？怎么回事，还要不要选，还是先观望一下吧。 2020.6.22说是通识课最好不要是自己院里开的，就不选了 计算机五班里真的好多大佬，瑟瑟发抖.jpg 暑假里真的要好好学啊，把python学好，然后在学习一点C语言，不能怂啊，高中同学比如李端端谁的都在学啊，我也可以！编码那本书也要好好看。 2020.7.12昨天在B站看了一个从业二十多年大佬的采访，感觉受益良多。暑假开始挺久了，代码没写几行，一直在练车，科三终于考过去了，明天就要去辅导班教课了，学习也不能落下啊。 买的C语言不能荒废啊。 已经荒废了。 2020.7.19今天电脑差点打不开了，气死我了，吐槽一下，我的电脑我姐一开始着急忙慌的把所有密码都设置好了，还有微软的账号，这块我都还不是很懂，她都用她的电话邮件绑定好了，无语子，将来我一定要自己攒钱自己买一台更好的电脑！ 还要好好学电脑知识，哎，哭了，马上就要转计算机的人，结果连自己的电脑都开不了机了，说出去让人笑话。 2020.8.2今天写了几行代码，突然发现我边写竟然边哼起了歌，写代码还是一件能让我开心的事啊~ 偶然间进了爱特的招新群，希望我开学了能成为他们中的一员，但是感觉好难哦，层层考核，冲呀欧里给! 2020.8.4I Love It!!!!!!!!!!!!!!!!!!!!!!!!! 爱特这都是为宁受的苦 又一次发出了鸡叫哈哈哈哈 蚌埠住了，好憨😓 2020.8.26保佑我Python一定考好，求求了 会做就是会做，不会做就是不会做的这种感觉就是比做英语的题好 考python的时候我仿佛又回到高三做数学题的那种感觉 2020.8.2787！！！我哭了！！ 有点激动！比我想象的得高了十分左右，好开心好开心！ 2020.9.3妈的。我烦了。 下载个VS2019下了两天才下好，昨天晚上下好的时候还有点小激动，今天早上打开一看，我靠，缺少什么组件得重装，我现在想把它给删除了，老子不下了还不行嘛，妈的，删都删不动，我giaooooo。 还有他妈的我电脑C盘为什么容量那么小，现在还他爹的还剩20多G 好了好了，淡定我要淡定。早该料到了，这种事情只会越来越多。 接下来，选了计算机的课就一定要好好学，不能糊弄过去，只求一个差不多的成绩，现在就要为将来毕业工作做打算，至于那些什么乱七八糟的政治课什么素质测评加分的就别管那么多了，顺利毕业就行了 加油加油加油！我能行的，我可以的 Amazing！我的VS2019又能用了，我好想知道为什么不能运行也删除不了了，好像是因为我把装VS2019的文件夹名字给改了，我刚刚又改回去了，他就能运行了，我去神奇 这他妈的真是玄学！ 但我现在还是有一个问题挡了我好久了，就是Django创建视图，修改URL后我的网页打不开，我他妈明明就是按照老师教的一步一步打上去的代码，为什么我的网页就是打不开，我giaoooooooooooooo! 2020.9.16自己学就是难。 有个老师教教我该多好。 卡在一个地方动弹不得，可能老师稍微一提就能解决，脑袋疼 2020.12.10 哇时间过得好快，几个月转眼就过去了。 这几月我经历了什么呢，我转计算机失败了。。。 我加入了爱特工作室，收获了很多吧，真的感觉自己在学到东西。 大概率跨考计算机了吧，很难很难，但是我没有办法呀，我没有选择的余地。 越来越感觉自己是喜欢写代码这件事情的，在电脑前一坐可以坐几个小时，而且完全不玩手机。写代码的过程也有过很烦恼的时候，感觉头都大了，可是问题解决的那一刻一切都是值得的。这种正反馈真是太令人高兴了。 记得漂流瓶那个项目结束的时候，帅姐姐说了几句说我写的还不错，我表面上很淡定，其实心里已经乐开了花。欣喜若狂。 最近爱特的项目都结束了，我可以继续去学我的C语言了，/(ㄒoㄒ)/~~ 学的也太慢了。 今天看了几页java，把eclipse下好了，环境也配好了，写出了第一个java，虽然这完全不值一提，但是我就是要提哈哈哈 前方的路不知道还会遇到多少困难，总之，加油吧。 要加油哦。不能停止学习哦。 不让我转，我就要让你看看，不让老子转是你们计算机系的损失， 哼(￢︿̫̿￢☆) 2020.12.25看B站翁恺老师的C语言，老师说： 学计算机一定要有一个非常强大的心理状态，计算机的所有东西都是人做出来的，别人能想得出来的我也一定能想出来。计算机里头没有任何黑魔法。所有的东西只不过是我现在不知道而已。总有一天我会把所有的细节、所有内部的东西全都搞明白的。 指针就是保存地址的变量 2020.12.302020年马上就要结束了，这一年对我的人生来说算是不平凡的一年吧，虽然感觉自己也没有什么变化，但以后回想起来，可能是因为我处于变化之中，以至于我感受不到变化了。这一年，我可以说是重新考虑了自己的专业，遇到了我从未遇到过的事情，打开了新世界的大门，又破灭了希望，于迷茫的前路中继续寻找出路、寻找希望。 我想挣脱，可我又囿于牢笼、挣脱不得。不断被两边撕扯着，几乎要裂开来。 我明白我不是个多么厉害的人，可我脑子又好清醒，我明白我自己不甘于此，我不想就此沉溺、沉沦。 哎，先把期末考试应付过去，寒假这一个半月，一定一定不能荒废。 先完成爱特的任务，学一下服务器的相关知识。然后重新学一遍python尤其是关于面向对象那一部分，公共课竟然不教这个。C语言把视频看完。 这些是基本任务，一定一定要完成！！！！！！！！！ 不完成你就不姓姚！！！！ 除此之外，可以在学一些其他的，比如Python的爬虫Flask、计算机视觉、算法什么的。 人生又要再出发呀。 See you!","categories":[],"tags":[{"name":"nonsense","slug":"nonsense","permalink":"https://vanessayaoyao.github.io/tags/nonsense/"}]},{"title":"Redis初识","slug":"meet-redis","date":"2021-12-18T05:30:10.000Z","updated":"2021-12-18T06:51:06.166Z","comments":true,"path":"2021/12/18/meet-redis/","link":"","permalink":"https://vanessayaoyao.github.io/2021/12/18/meet-redis/","excerpt":"","text":"程序部有一回课是讲缓存的，但那天我睡过头了没上成。就对redis不怎么了解，也没具体应用过。 此事警醒我们不要睡过头！ 什么是Redis？Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 MySQL VS RedisMySQL是关系型数据库,主要用于存放持久化数据,将数据存储在硬盘中,读取速度较慢. Redis是NOSQL,即非关系型数据库,也是缓存数据库,即将数据存储在缓存中,缓存的读取速度快,能够大大的提高运行效率,但是保存时间有限. 缓存的必要网站访问的特点和现实世界的财富分配一样遵循二八定律：80% 的业务访问集中在20% 的数据上。既然大部分业务访问集中在一小部分数据上，那么如果把这一小部分数据缓存在内存中，就可以减少数据库的访问压力，提高整个网站的数据访问速度，改善数据库的写入性能了。 Redis 在django的使用下载首先要先下载Redis, 参考步骤：click this 1pip install django-redis redis 和 django-redis的区别，就像mysql和mysqlclient的区别。 我以前还以为下载django-redis就完事了呢，😓 settings.py里的配置复制一下github上官方文档的配置 123456789CACHES = &#123; &quot;default&quot;: &#123; &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;, &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;, &quot;OPTIONS&quot;: &#123; &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;, &#125; &#125;&#125; 简单使用我有这么简简单单一张表 12345# models.pyclass Blog(models.Model): title = models.CharField(max_length=128) author = models.CharField(max_length=128) content = models.TextField() 我想实现：当用户访问一篇博客时，第一次访问从数据库里拿出来，放在缓存里。当用户再次访问时，不再进行数据库查询，使用缓存数据。 123456789101112131415161718192021#views.pyfrom django.core.cache import cachedef blog(request,id): dic = &#123;&#125; if request.method == &quot;GET&quot;: if cache.get(id): dic[&#x27;code&#x27;] = 200 dic[&#x27;msg&#x27;] = &quot;hit the cache&quot; dic[&#x27;data&#x27;] = BlogSerializer(cache.get(id)).data # cache.delete(id) else: dic[&#x27;code&#x27;] = 201 dic[&#x27;msg&#x27;] = &quot;hit the database&quot; blog = Blog.objects.get(id=id) cache.set(id, blog) #id为键，blog为值 dic[&#x27;data&#x27;] = BlogSerializer(blog).data else: dic[&#x27;code&#x27;] = 400 dic[&#x27;msg&#x27;] = &quot;wrong method&quot; return JsonResponse(dic) 第一次访问 再次访问 更多操作（如设置过期时间）可参考：django-redis","categories":[],"tags":[{"name":"code","slug":"code","permalink":"https://vanessayaoyao.github.io/tags/code/"}]},{"title":"英语、计算机与我","slug":"about-me","date":"2021-12-12T04:59:55.000Z","updated":"2021-12-31T08:35:25.392Z","comments":true,"path":"2021/12/12/about-me/","link":"","permalink":"https://vanessayaoyao.github.io/2021/12/12/about-me/","excerpt":"","text":"Thanks for your watching. Early Years我来自一个十八线小县城，上初中前没接触过英语，上大学前没接触过编程。 小学就在我们村里上的，上午上数学，下午上语文，体育课就是老师领着我们去操场上转两圈。没有英语课，更别说什么音乐课手工课的。对于小时候的我来说，日子过得平淡又快乐，没有什么糟心事，没有什么成绩排名，放学了就背着书包走着回家。这时还不知道能用双脚丈量的距离有多珍贵。可能偶尔烦恼就是，和我家在一个胡同的发小，她有好多好看的发卡，常常戴满了头发，而我没有，有时会嫉妒她哈哈。 上了初中就开始每周回一次家了，发小她之后对我说上了初中之后，她的童年就结束了，其实想想我也是。上小学的时候从来没有什么成绩排名，脑海里根本没有这个意识。上了初中就开始排名排名排名，但日子还算轻松。初一的时候认识的很多朋友，现在平时虽然不怎么联络，但在我心里她们已经是家人般的存在。下课的时候看看言情小说，和朋友打打闹闹，偶尔关心一下成绩排名，还早恋过，时间过得很快。有时会突然地恍惚，不知道现在是哪年哪月哪天，已经过去好久的事情仿佛就是昨天。 上了高中，曾经要好的朋友散落各地，也没有精力去结交新的朋友，我逐渐适应了一个人生活。一个人跑着去吃饭，很多时候都沉默寡言，没有话说，也没有什么表情。其实也没有什么很大的变化，我一直如此，懒得很，一个人的时间反而让我很自在。高中几乎都是学习了，学习学习学习，考上一个好大学。两周回家一次到最后一个月回家一次，一次在家的时间不超过二十四小时，一切照搬衡水中学的模式。 Why English忘记上高中的时候还是上初中的时候了，我有一段时间特别喜欢去校门口的书摊那买书，周一就把所有的零花钱就花光了。书摊上有许多三毛的书，我买来读过后，很是羡慕她。感觉三毛洒脱又自由，我也想这样。于是我就把北京十月出版社的三毛系列全买来读了一遍。三毛会好几种语言，西班牙语经常出现在她的书里，估计这就是我想读语言的由来吧，那时候一直给同学说我上大学要读西班牙语。现在这股读书的劲头早已消散，书买来也就是摆着。 恰巧高中的时候我英语的成绩还不错，一般考试成绩都在一百三以上，有次还上了一百四，不自觉便飘飘然，认为自己有学语言的天赋，自己就是学语言的天选之女，现在想想也是挺好笑的。那时候我还想着自己将来会去外交部，会穿着优雅知性的西装套裙站在国家领导人的背后，为他们翻译。谁还没有点梦想呢。哦不，是空想。在所有的课里，我最喜欢上的就是英语，感觉上的最轻松的也是英语，哪一次英语没有考好还会暗自神伤。但其实想想，我其实是被自己所营造的假象所欺骗了，我一直暗示自己，我的英语很好，我的英语很好，如此这般。 高考完后选专业，可想而知，我把所有学校的语言专业选了个遍，非语言专业不读。现在的我知道选语言专业不是一个好的决定，你所有的热情会被消磨殆尽，你会甚至讨厌英语，会不断怀疑自己。但对于当时的我来说，我也没有什么其他的选择，父母学识有限，给不了我很好的建议。所有的选择权都在我自己，其实完全是瞎选的，去知乎看了几篇帖子，草草地就结束了。我现在只能庆幸当时没有把北京第二外国语学院放在第一志愿，冲着海大985的名头选了海大。人呐，有时候还是要追名逐利一点的好（doge。 当时在知乎看了很多关于英语专业的问题，在B站也看了很多关于英语专业的视频分享，幻想着自己也能像他们这样，一口流利英语，结交各国好友，从此走上人生巅峰。但有个东西叫，幸存者偏差。我不自觉地忽视了一切不同的声音，只想看到自己看到的东西。哦对了，当时我还认为语言专业大三的时候都能出国交换的。那些出来分享的当然是过得还不错的，还有他们是北外或者上外的，沉默的大多数是没有话语权的。 进入大学，我给自己营造出的“我英语很好”的假象开始一点点瓦解。老师在专业课上指出我读音有问题；词汇量差的一批还不喜欢背单词；进入英表班，被非英语专业的同学吊打。人和人的差距真大呀。而且学英语的话还是要家境殷实一点的好，没有家庭支撑你想出去留学的话那等于胡闹。有钱啥时候都好啊，至少有选择的余地，有从头再来的底气。 英语当作兴趣那是极好的，但选英语专业我只能说是完全不必要的。英语这种专业啥样的大学都有，我不理解，除了北外上外的语言专业，其他学校的语言专业能不能不要开了。语言只是工具。没有其他技能的加持，真的很慌，真的没有底气。我一直很抵触说自己是英语专业的，感觉很难受或者说难为情。英语专业的英语不好哈哈。如果抱着当老师的想法那另当别论。至于我，我不想当老师，我当不好。 With code我和编程的起源，是我在大一下的时候选了一门课叫Python程序设计。那时候也不知道天高地厚，完全不知道Python是个什么东西，从来没接触过编程，但就是选了这门课。可以说这门课真的影响我很大吧。那时候还是疫情在家上网课，我就从什么都不会，不知道在哪输入字符。到慢慢有点思路，一耗两三个小时就是为了把一个练习题做出来。甚至还在班级群里回答其他同学的问题，虽然是用匿名。每成功一步都让我欣喜若狂、欢呼雀跃。这种心情是我上英语专业以来从未体会过的，真的从未体会到过。上了英语专业我就自动把自己归了底层一类，就忘记了自己也曾想当一个闪闪发光的人。 在大一下学期快结束的时候，我好像就在突然之间萌生了转到计算机专业的想法，这种想法只一瞬，但就像一粒种子，在我心中生了根发了芽，没过多久就长成了参天大树，无法动摇。想来人生也真是挺奇妙的，这样的事情最近又在我的人生中上演。人人都考研，但不考研的想法就不知何时飘进了我的脑中，这种想法愈演愈烈，让我做出了自己的决定。我不知道像这样的想法会将我的人生带向何处，但我知道它们已经改变了我的人生，我也期待着前方的路。 大二前的那个小学期我就没有选英语专业的课了，大二上学期的课完全照着计算机专业培养方案选的，兴高采烈等着加课。那天应该是一个星期一，我在院办值班，看到群里有人说加课结果出来了，我就打开看看自己的结果，结果为未通过。开始慌了。我早早下班了。出了外院门，我就给信院的教秘打电话。下午的课也直接翘掉了，直接去信院找教秘，教秘不管，又给系主任打电话。说是不给大二才转的加课。其实从看到结果的时候，我就知道再去找谁也不会改变什么了。现在想起来那天的经历还会觉得鼻头酸酸。在一个下午的时间里，我挣扎过，又很快接受了我不能改变的现状，马上去教务处加上了英语专业的课。只想毕业就好。 可能不能系统地学习计算机课程会有一点遗憾。有遗憾。但我现在也想开了。转过去的话，要补一年的课，每次选课都提心吊胆，还要面临延毕的焦虑，没有认识的朋友，估计也会很难熬。有时候会感觉老天在指引我的人生。之前的时候都能加课的，现在好像也能加课，就好巧没给我加课。我并没有“被安排”的感觉，要质问什么的，我只是觉得很奇妙。来到海大，大一下学了Python，就此产生转专业的想法，大二上凭着Python进了爱特程序部，到现在决定不考研毕业直接去找工作。一环扣一环，时间错开一点，我的人生估计又会有很大的不同。 Sophomore year and later转专业失败后，就回去继续上英语专业的课。上课就是等着下课，数着时间一点点过去。很长一段时间，我感觉我像被绑在一根绳上，两端都被紧紧拉着，没办法左移也没法右移，我也没法喘气。我想在课余时间里从“英语专业”里抽离出来去学点计算机相关的东西，但那些作业和数不清的展示又把我绑了回去。我又怂得很，不敢翘课，不敢不交作业，没有摆烂的勇气。躺平这个词还可以，我就任凭别人卷我，再卷我也不为所动，对很多事情也不太关心了。 比较幸运的事就是进入了爱特工作室，爱特是我唯一可以接触代码的地方。虽然我一直觉得自己像这个社团的“局外人”，我不是信院的，不爱玩游戏没什么共同话题，对技术的热爱也谈不上，但我一直很留恋在社团的时间，也从来没想过退出。爱特给了我一个平台，让我看到真正优秀的计算机大佬是什么样子的。写项目的过程，从什么都不会一个简单的东西查半天，到现在回望自己之前写的代码感觉像shit，我没学到了很多，但也确实是学到了很多。 爱特给了我成长，也给了我很多伤感emo的瞬间。我不记得我有多少个星期日的晚上，是垂头丧气回宿舍的。在看到别人的优秀后，我不知道我要怎么样才能追赶他们的脚步，我太垃圾了，太菜了。要学的东西太多了，会的东西太少了，和别人的差距太大了。现在我也时时会焦虑，但我已经学会和自己和解，不要和别人比，要和昨天的自己比。”无论人生上到哪一层台阶，阶下有人在仰望你，阶上亦有人在俯视你。你抬头自卑，低头自得。唯有平视，才能看见真正的自己。” 现在大三上学期即将结束，还有好几篇论文没写完，明天就是新的一年。下学期有更多自己可以支配的时间了，多学点，大四可能去实习。毕业后就去北京找工作了。不知道还会经历多少社会的毒打，就期待自己能获得自由吧。人生有什么意义呢？越去想人生有什么意义，我越觉得人生无意义。专注当下吧，想太多都是闲得，赶快去学习，反而能得到快乐和满足。 感谢豆瓣，感谢所有TV。 to be continued…","categories":[],"tags":[{"name":"life","slug":"life","permalink":"https://vanessayaoyao.github.io/tags/life/"}]},{"title":"JWT在Django中的具体实现","slug":"JWT在Django中的具体实现","date":"2021-12-03T09:10:25.000Z","updated":"2021-12-03T10:47:04.618Z","comments":true,"path":"2021/12/03/JWT在Django中的具体实现/","link":"","permalink":"https://vanessayaoyao.github.io/2021/12/03/JWT%E5%9C%A8Django%E4%B8%AD%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"记录一下，加深自己的理解。 什么是JWT？JWT是Json Web Token的缩写，可去官网查看更多。 简单说来，它和session干着一样的活，即身份认证。它保存在客户端，本质是一长串字符串，由header, payload和signature组成。 Why JWT not session? 使用session 存在CSRF攻击 session存在服务器端，无法适用分布式站点。 在Django中使用首先安装PyJWT 1pip install PyJWT models.py里建一张用户表，有用户名、密码等字段。 in views.py 1234567891011121314151617181920212223242526from .models import Userimport jwt, datetime, simplejson #导入def login(request): if request.method == &quot;POST&quot;: #接收json数据 username = simplejson.loads(request.body)[&#x27;username&#x27;] password = simplejson.loads(request.body)[&#x27;password&#x27;] #这里验证密码是否正确什么的我就先不写了 user = User.objects.filter(username=username).first() payload = &#123; #将该用户的id或username加入payload中 &quot;id&quot;: user.id, #过期时间，我这里写的是60分钟后过期 &quot;exp&quot;: datetime.datetime.utcnow() + datetime.timedelta(minutes=60), #生效时间，我这里写的是即刻生效 &quot;iat&quot;: datetime.datetime.utcnow() &#125; #将payload加密，我的密钥是&quot;secret&quot;(可以随便写) token = jwt.encode(payload, &quot;secret&quot;, algorithm=&#x27;HS256&#x27;).decode(&#x27;utf-8&#x27;) #将token返回 return JsonResponse(&#123;&#x27;jwt&#x27;: token, &#x27;msg&#x27;:&#x27;success&#x27;&#125;) else: return JsonResponse(&#123;&#x27;msg&#x27;: &#x27;wrong http method&#x27;&#125;) 123456789101112131415161718192021def user_info(request): if request.method == &quot;GET&quot;: #接收前端小伙伴放在HTTP头部的token #这样也避免了CSRF攻击 token = request.META.get(&#x27;HTTP_AUTHORIZATION&#x27;) if not token: msg = &#x27;not get token&#x27; try: #使用相同的密钥解密 payload = jwt.decode(token, &#x27;secret&#x27;, algorithms=[&#x27;HS256&#x27;]) #拿到用户id，从而完成用户认证 user = User.objects.get(id=payload[&#x27;id&#x27;]) msg = &#x27;get token, and I know you are &#x27; + user.username #也会存在异常 except jwt.ExpiredSignatureError: #如这里是token过期 msg = &#x27;token expired&#x27; except Exception as e: #还有其他过期类型，就不展开写了 msg = &quot;token invalid&quot; return JsonResponse(&#123;&#x27;token&#x27;: token, &#x27;msg&#x27;: msg&#125;) else: return JsonResponse(&#123;&#x27;msg&#x27;: &#x27;wrong http method&#x27;&#125;) 接口测试可用Postman， apifox等。 这只是一个小demo，实际运用中不可能每个需要身份认证的地方都写一遍（这么干也不是不行），所以考虑封装成装饰器。 这里我自我检讨一下，其实我装饰器并没有学会，只会照抄别人的代码。 改天再写一篇关于装饰器的博客。（立flag了） See you.","categories":[],"tags":[{"name":"code","slug":"code","permalink":"https://vanessayaoyao.github.io/tags/code/"}]},{"title":"怎么说呢，说就是不想考研了","slug":"怎么说呢，说就是不想考研了","date":"2021-10-11T00:23:28.000Z","updated":"2021-10-11T00:26:59.873Z","comments":true,"path":"2021/10/11/怎么说呢，说就是不想考研了/","link":"","permalink":"https://vanessayaoyao.github.io/2021/10/11/%E6%80%8E%E4%B9%88%E8%AF%B4%E5%91%A2%EF%BC%8C%E8%AF%B4%E5%B0%B1%E6%98%AF%E4%B8%8D%E6%83%B3%E8%80%83%E7%A0%94%E4%BA%86/","excerpt":"","text":"我虽无意逐鹿，却知苍生苦楚。 我头铁，要去撞南墙了。","categories":[],"tags":[{"name":"life","slug":"life","permalink":"https://vanessayaoyao.github.io/tags/life/"}]},{"title":"寒假日常","slug":"寒假日常","date":"2021-02-07T16:23:46.000Z","updated":"2021-06-20T08:34:20.627Z","comments":true,"path":"2021/02/08/寒假日常/","link":"","permalink":"https://vanessayaoyao.github.io/2021/02/08/%E5%AF%92%E5%81%87%E6%97%A5%E5%B8%B8/","excerpt":"","text":"第一天 刷手机 第二天 刷手机 第三天 刷手机 第四天 刷手机 第五天 刷手机 第六天 tmd, 烦死了。老子要学习！ 第七天 刷手机。。。","categories":[],"tags":[]},{"title":"hello world!","slug":"hello-world-1","date":"2021-01-31T07:17:39.000Z","updated":"2021-01-31T07:29:06.899Z","comments":true,"path":"2021/01/31/hello-world-1/","link":"","permalink":"https://vanessayaoyao.github.io/2021/01/31/hello-world-1/","excerpt":"","text":"Hi. This is my first blog. I’m very excited.","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"code","slug":"code","permalink":"https://vanessayaoyao.github.io/tags/code/"},{"name":"java","slug":"java","permalink":"https://vanessayaoyao.github.io/tags/java/"},{"name":"nonsense","slug":"nonsense","permalink":"https://vanessayaoyao.github.io/tags/nonsense/"},{"name":"life","slug":"life","permalink":"https://vanessayaoyao.github.io/tags/life/"}]}